#--------------------------------------------------------------------------#
#                      SeekCamera SPI Configuration File                   #
#--------------------------------------------------------------------------#

# This configuration file defines how the Seek SDK v4.0+ should communicate 
# with Microcore and it's Maxim co-processor over SPI. The new Seek SDK handles
# all SPI requests internally for ease of use and shares a common API with USB
# Mosaic cores on a wide array of hardware systems, such that any application
# built against the 4.0 SDK can be used with both USB and SPI cores. 
# Currently the Seek SDK only supports SPI communication via spidev.

# The Seek SDK 4.0+ will automatically parse this config file during
# seekcamera_manager_init when placed in the following host-specific locations:
#     Linux: ~/.seekthermal/seekspi.conf

#Overview of Configuration Options:
# ├──[driver]:
# |
# |       Description: Name of the SPI driver the SDK should use for SPI communication.
# |       Required: Yes
# |       Type: String
# |       Default: spidev
# |       Possible Values:
# |         1) "spidev"
# |
# ├──[max_transfer_size]:
# |
# |       Description: Specifies the max number of bytes the SDK can burst
# |                    to/from the camera over SPI. Mainline spidev only
# |                    supports bursts up to 4k (the default kernel page size).
# |                    If you would like to remove this limitation such
# |                    that the SDK can burst an entire frame (~64k bytes),
# |                    you may patch spidev for your system, and update this
# |                    setting respectively. The SDK will always make a best
# |                    effort attempt to leverage increased burst size.
# |       Required: Yes
# |       Type: Scalar Integer
# |       Default: 4096
# |       Possible Values:
# |         1) 0-4096 for mainline spidev
# |         2) 4096+ for modified spidev
# |
# ├──[camera_sync]:
# |
# |       Description: Specifies whether the SDK should attempt to automatically:
# |                    1) Synchronize host SPI transfers with the start of the FPA frame.
# |                    2) Synchronize the output from all cameras to within 1 FPA row time.
# |       Required: No
# |       Type: String
# |       Default: off
# |       Possible Values:
# |         1) on
# |         2) off
# |
# └── [bus]:
#   |
#   |       Description: Declares a SPI bus that is connected to a Seek camera.
#   |                    Currently, the SDK only supports configuring 1 bus.
#   |       Required: Yes
#   |       Type: Node
#   |
#   ├── [num]:
#   |
#   |       Description: Specifies the major number of the bus. For Linux systems
#   |                    with spidev support this corresponds to the major
#   |                    device number (A) in /dev/spidevA.B.
#   |       Required: Yes
#   |       Type: Scalar Integer
#   |       Default: 0
#   |       Possible Values:
#   |         1) 0-255
#   |
#   ├── [speed_hz]:
#   |
#   |        Description: The speed of SCLK (in Hz) for this bus.
#   |                    A minimum of 5.14Mhz is required for running a single camera
#   |                    at full frame rate(<9fps). If the specified speed is lower the 5.14Mhz,
#   |                    the SDK will continue to request and process image data
#   |                    from the camera, but framerate will be reduced.
#   |                    SCLK must not exceed 6MHz on Rev 0-7 M2 Integration Boards.
#   |       Type: Scalar Integer
#   |       Default: 5140000
#   |       Possible Values:
#   |         1) 0-6000000
#   |
#   └── [camera]:
#       |
#       |      Description: Declares a Seek camera connected to the parent SPI bus.
#       |                  Currently, the SDK only supports configuring 1 SPI camera.
#       |      Required: Yes
#       |      Type: Node
#       |
#       └── [cs]:
#       |
#       |      Description: Specifies the chip select number to use for this camera.
#       |                  On Linux systems with spidev, this corresponds
#       |                  to the minor device number (B) in /dev/spidevA.B
#       |      Required: Yes
#       |      Type: Scalar Integer
#       |      Default: 0
#       |      Possible Values:
#       |         1) 0-255
#       |
#       └── [frame_sync / reset_ctrl / power_ctrl]:
#           |
#           |     The SDK requires control of either RSTn on the Maxim co-processor,
#           |     or Maxim VDD enable, but does not require both. The SDK can also
#           |     optionally use FPA nSS to aid with host / Maxim frame syncronization.
#           |     control may be provided via deidcated GPIOs or custom spidev ioctls.
#           |     If control of Maxim VDD is provided, the SDK will attempt to minmize
#           |     power consuption whenever possible.
#           |
#           |      [frame_sync]: Specifies how the SDK should monitor FPA nSS.
#           |                  FPA nSS can be used by the SDK to syncronize communication
#           |                  between Host/Maxim/Sensor. If this seetting is not specified,
#           |                  the SDK will send sync commands in between frames to maintain
#           |                  top-of-frame syncronization with the thermal sensor.
#           |      Required: No
#           |      Type: Node
#           |
#           |      [reset_ctrl]: Specifies the configuration for
#           |                  discrete IO output control over Maxim RSTn.
#           |      Required: No
#           |      Type: Node
#           |
#           |      [power_ctrl]: Specifies how the SDK should enable Maxim VDD.
#           |                 The SDK will power down the Maxim whenever there is
#           |                 no active capture session to minimize power consumption.
#           |      Required: No
#           |      Type: Node
#           |
#           └── [settling_time_ms]:
#           |
#           |      Description: Number of ms the SDK should wait for
#           |                   reset_ctrl or power_ctl to stabilize.
#           |                   This setting is ignored for frame_sync nodes.
#           |      Required: No
#           |      Type: Scalar Integer
#           |      Default Value: 0
#           |      Possible Values:
#           |       1) 0-255
#           |
#           └── [inverting]:
#           |
#           |      Description: Specifies whether or not to invert polarity
#           |                   when controlling reset_ctrl and power_ctrl
#           |      Required: Yes
#           |      Type: Boolean
#           |      Default Value: False
#           |      Possible Values:
#           |       1) True if inverting.
#           |       2) False if non-inverting.
#           |
#           └── [gpio]:
#           |
#           |       Description: GPIO number used for frame_sync / reset_ctrl / power_ctrl.
#           |                  On Linux systems this GPIO must be accessible via syfs.
#           |                  If the GPIO requested is not exported, the SDK will
#           |                  automatically export it to the sysfs, and configure
#           |                  direction, and active_low based on the known
#           |                  polarity of the Maxim.
#           |       Required: Yes
#           |       Type: Scalar Integer
#           |       Possible Values:
#           |         1) 0-65536
#           |
#           └── [ioctl]:
#               |
#               |  Description: Specifies that the SDK should control Maxim RSTn and/or
#               |              VDD with a custom spidev ioctl defined and implemented
#               |              by the user of the SDK. The SDK will issue
#               |              an _IOW request of size bytes to spidev,
#               |              passing either 1 (true) or 0 (false) to indicate
#               |              whether the Maxim co-processor should be
#               |              held in reset or powered down.
#               |  Required: No
#               |  Type: Node
#               |
#               └── [request]:
#               |
#               |     Description: Value of the custom ioctl _IOW request.
#               |     Required: Yes
#               |     Default: 0
#               |     Type: Scalar Integer
#               |
#               └── [bytes]:
#
#                     Description: Length of request in bytes.
#                     Required: Yes
#                     Default: 0
#                     Type: Scalar Integer

#--------------------------------------------------------------------------#
#                   Example: RPi4 + Seek M2 Integration Board              #
#--------------------------------------------------------------------------#
# Here we show an example configuration for imaging a single Microcore with an
# M2 Integration board. The camera is connected to SPI0, CS0, sets SCLK to ~4MHz,
# and controls Maxim RSTn via GPIO2. This example does not control Maxim VDD
# or Maxim RSTn -- The Maxim co-processor is powered directly via the RPi 3.3V
# header and Maxim RSTn is held high with a pull up resistor or left floating
# without the programming header connected.
---
driver: spidev
max_transfer_size: 4096
bus:
  num: 0
  speed_hz: 3900000	        #RPi4 must be limited to 4MHz.
  camera:
    cs: 0
...

#--------------------------------------------------------------------------#
#    Example: RPi4 + Seek M2 Integration Board w/ Maxim RSTn control       #
#--------------------------------------------------------------------------#
# Here we show an example configuration for imaging a single Microcore with an
# M2 Integration board. The camera is connected to SPI0, CS0, sets SCLK to ~4MHz,
# and controls Maxim RSTn via GPIO1. This example does not control Maxim VDD --
# The Maxim co-processor is powered directly via the RPi 3.3V header and therefore
# cannot be enabled or disabled via GPIO or spidev ioctl.
# ---
# driver: spidev
# max_transfer_size: 4096
# camera_sync: on
# bus:
#   num: 0                        #/dev/spidev0.X
#   speed_hz: 3900000	            #RPi4 must be limited to 4MHz.
#   camera:                       #/dev/spidevX.0
#     cs: 0
#     reset_ctrl:                 #Maxim RSTn
#       gpio: 1
#       settling_time_ms: 40
#       inverting: false
# ...

#--------------------------------------------------------------------------#
#    Example: RPi4 + Seek M2 Integration Board w/ Hardware frame sync      #
#--------------------------------------------------------------------------#
# Here we show an example configuration for imaging a single Microcore with an
# M2 Integration board. The camera is connected to SPI0, CS0, sets SCLK to ~4MHz,
# and controls Maxim RSTn via GPIO1. This example does not control Maxim VDD --
# The Maxim co-processor is powered directly via the RPi 3.3V header and therefore
# cannot be enabled or disabled via GPIO or spidev ioctl. Additionally this
# example shows how to dedicate a frame_sync gpio for FPA nSS. If the level
# shifted FPA nSS is provided as a GPIO input to the SDK, the SDK will avoid
# polling the SPI bus for a top-of-frame event.
# ---
# driver: spidev
# max_transfer_size: 4096
# camera_sync: on
# bus:
#   num: 0
#   speed_hz: 3900000	        #RPi4 must be limited to 4MHz.
#   camera:
#     cs: 0
#     reset_ctrl:
#       gpio: 1
#       settling_time_ms: 40
#       inverting: false
#     frame_sync:
#       gpio: 2
#       inverting: false
# ...


#--------------------------------------------------------------------------#
#            Example: RPi4 + Multiple M2 Integration Boards                #
#--------------------------------------------------------------------------#
# Here we show an example configuration for imaging two Microcores with two
# M2 Integration boards. Both cameras are connected to SPI0, and SCLK is set
# to ~4MHz. Typically an SCLK of 10.28 MHz is required to run both cameras
# at full frame rate, however due to limitations with the Rev7 and older M2
# Integration Boards, SCLK must not exceed more than 6MHz. 3.9 MHz is the
# fastest SCLK an RPi can provide without exceeding the 6MHz limit. Additionally,
# even though SCLK is lower than what is needed to run a t full framerate,
# the SDK will make a best effort attempt to image the cores at lower clock rates,
# dropping frames as needed to maintain syncronization. In this example, the
# first camera is connected to SPI0, CS0 and Maxim RSTn is controlled via GPIO1.
# The second camera is connected to SPI0, CS1 and Maxim RSTn is controlled
# via GPIO2 This example does not control Maxim VDD -- both Maxim co-processors
# are powered directly via the RPi 3.3V header and therefore cannot be enabled
# or disabled via GPIO or spidev ioctl.
# ---
# driver: spidev
# max_transfer_size: 4096
# camera_sync: on
# bus:
#   num: 0
#   speed_hz: 3900000	        #RPi4 must be limited to 4MHz.

#   camera:
#     cs: 0
#     reset_ctrl:
#       gpio: 1
#       settling_time_ms: 40
#       inverting: false

#   camera:
#     cs: 1
#     reset_ctrl:
#       gpio: 2
#       settling_time_ms: 40
#       inverting: false
# ...

#--------------------------------------------------------------------------#
#   Example: RPi4 + Multiple M2 Integration Boards w/ Hardware frame sync  #
#--------------------------------------------------------------------------#
# Here we show an example configuration for imaging two Microcores with two
# M2 Integration boards. Both cameras are connected to SPI0, and SCLK is set
# to ~4MHz. Typically an SCLK of 10.28 MHz is required to run both cameras
# at full frame rate, however due to limitations with the Rev7 and older M2
# Integration Boards, SCLK must not exceed more than 6MHz. 3.9 MHz is the
# fastest SCLK an RPi can provide without exceeding the 6MHz limit. Additionally,
# even though SCLK is lower than what is needed to run a t full framerate,
# the SDK will make a best effort attempt to image the cores at lower clock rates,
# dropping frames as needed to maintain syncronization. In this example, the
# first camera is connected to SPI0, CS0 and Maxim RSTn is controlled via GPIO1.
# The second camera is connected to SPI0, CS1 and Maxim RSTn is controlled
# via GPIO2 This example does not control Maxim VDD -- both Maxim co-processors
# are powered directly via the RPi 3.3V header and therefore cannot be enabled
# or disabled via GPIO or spidev ioctl. Additionally this example shows how to
# dedicate a frame_sync gpio for FPA nSS. If the level shifted FPA nSS is provided
# as a GPIO input to the SDK, the SDK will avoid polling the SPI bus with
# sync commands in order to determine when a top-of-frame event has occured.
# ---
# driver: spidev
# max_transfer_size: 4096
# camera_sync: on
# bus:
#   num: 0
#   speed_hz: 3900000	        #RPi4 must be limited to 4MHz.

#   camera:
#     cs: 0
#     reset_ctrl:
#       gpio: 1
#       settling_time_ms: 40
#       inverting: false
#     frame_sync:
#       gpio: 3
#       inverting: false

#   camera:
#     cs: 1
#     reset_ctrl:
#       gpio: 2
#       settling_time_ms: 40
#       inverting: false
#     frame_sync:
#       gpio: 4
#       inverting: false
# ...
